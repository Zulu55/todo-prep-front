[{"Z:\\Projects\\todo-prep-front\\src\\index.js":"1","Z:\\Projects\\todo-prep-front\\src\\App.jsx":"2","Z:\\Projects\\todo-prep-front\\src\\context\\TaskProvider.js":"3","Z:\\Projects\\todo-prep-front\\src\\components\\Tasks.jsx":"4","Z:\\Projects\\todo-prep-front\\src\\components\\Alert.jsx":"5"},{"size":290,"mtime":1609888316436,"results":"6","hashOfConfig":"7"},{"size":220,"mtime":1609865249822,"results":"8","hashOfConfig":"7"},{"size":2303,"mtime":1609965600961,"results":"9","hashOfConfig":"7"},{"size":5936,"mtime":1609958405676,"results":"10","hashOfConfig":"7"},{"size":207,"mtime":1609887140316,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"l4f6lz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"Z:\\Projects\\todo-prep-front\\src\\index.js",[],["25","26"],"Z:\\Projects\\todo-prep-front\\src\\App.jsx",[],"Z:\\Projects\\todo-prep-front\\src\\context\\TaskProvider.js",[],"Z:\\Projects\\todo-prep-front\\src\\components\\Tasks.jsx",["27"],"import React from 'react'\r\nimport moment from 'moment'\r\nimport Alert from './Alert'\r\nimport {TaskContext} from '../context/TaskProvider'\r\n\r\nconst Tasks = () => {\r\n\r\n    const {tasks, getTasks, putTask, postTask, deleteTask} = React.useContext(TaskContext) \r\n    const [task, setTask] = React.useState('')\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [taskEdit, setTaskEdit] = React.useState(null)\r\n    const [isLoading, setIsLoading] = React.useState(true)\r\n    const [error, setError] = React.useState(null)\r\n\r\n    React.useEffect(() => {\r\n        getTasks()\r\n        setIsLoading(false)\r\n    }, [])\r\n\r\n    const addTask = e => {\r\n        e.preventDefault()\r\n        if(!task.trim()) {\r\n            setError('You must enter a task description.')\r\n            return\r\n        }\r\n\r\n        postTask({ 'taskDescription': task })\r\n        setTask('')\r\n        setError(null)\r\n    }\r\n\r\n    const saveTask = e => {\r\n        e.preventDefault()\r\n        if(!task.trim()) {\r\n            setError('You must enter a task description.')\r\n            return\r\n        }\r\n\r\n        const toUpdate = {\r\n            'createdTime': taskEdit.createdTime,\r\n            'taskDescription': task,\r\n            'isCompleted': true,\r\n            'rowKey': taskEdit.rowKey\r\n        }\r\n\r\n        putTask(toUpdate)\r\n        setTask('')\r\n        setTaskEdit(null)\r\n        setEditMode(false)\r\n        setError(null)\r\n    }\r\n\r\n    const activateEditMode = (item) => {\r\n        setEditMode(true)\r\n        setTask(item.taskDescription)\r\n        setTaskEdit(item)\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-8\">\r\n            <h3>Tasks List</h3>\r\n                {\r\n                    isLoading ? (\r\n                        <Alert message={error}/>\r\n                    ) : (\r\n                        <table className=\"table table-striped table-hover\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Description</th>\r\n                                    <th>Date</th>\r\n                                    <th>Completed</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    tasks.map(item => (\r\n                                        <tr key={item.rowKey}>\r\n                                            <td>{item.taskDescription}</td>\r\n                                            <td>{moment(item.createdTime).format('YYYY/MM/DD hh:ss')}</td>\r\n                                            <td>\r\n                                                {\r\n                                                    item.checked ? (\r\n                                                        <input type=\"checkbox\" disabled checked/>\r\n                                                    ) : (\r\n                                                        <input type=\"checkbox\" disabled/>\r\n                                                    )\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                <button \r\n                                                    className=\"btn btn-warning mr-2\"\r\n                                                    onClick={() => activateEditMode(item)}\r\n                                                >\r\n                                                    Edit\r\n                                                </button>\r\n                                                <button \r\n                                                    className=\"btn btn-danger\"\r\n                                                    onClick={() => deleteTask(item.rowKey)}\r\n                                                >\r\n                                                    Delete\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    )\r\n            }\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n                <h3>{editMode ? 'Edit Task' : 'New Task'}</h3>\r\n                <form onSubmit={editMode ? saveTask : addTask}>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control mb-2 mt-3\"\r\n                        placeholder=\"Enter the new task description...\"\r\n                        value={task}\r\n                        onChange={e => setTask(e.target.value)}\r\n                    />\r\n\r\n                    <div className=\"input-group mb-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\">\r\n                                <input type=\"checkbox\" aria-label=\"Checkbox for following text input\"/>\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"Text input with checkbox\" placeholder=\"Is Completed?\" disabled/>\r\n                    </div>\r\n\r\n                    {\r\n                        error && (\r\n                            <Alert message={error}/>\r\n                        )\r\n                    }\r\n                    <button \r\n                        type=\"submit\"\r\n                        className={editMode ? 'btn btn-warning btn-block' : 'btn btn-dark btn-block'}\r\n                    >\r\n                        { editMode ? 'Save' : 'Add'}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks","Z:\\Projects\\todo-prep-front\\src\\components\\Alert.jsx",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":18,"column":8,"nodeType":"36","endLine":18,"endColumn":10,"suggestions":"37"},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.","ArrayExpression",["42"],["40"],["41"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [getTasks]",{"range":"45","text":"46"},[622,624],"[getTasks]"]